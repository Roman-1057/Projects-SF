>>> from news.models import *

___________________________________________________________________
Создание пользователей:

user1 = User.objects.create_user(username='Роман')
user2 = User.objects.create_user(username='Виктор')
randomuser = User.objects.create_user(username='Пользователь')
randomuser1 = User.objects.create_user(username='Пользователь2')
randomuser2 = User.objects.create_user(username='Пользователь3')

___________________________________________________________________
Создание авторов:

author1 = Author.objects.create(user=user1, rating=0)
author2 = Author.objects.create(user=user2, rating=2)

___________________________________________________________________
Создание категорий:

category1 = Category.objects.create(name="Автомобили")
category2 = Category.objects.create(name="Рецепты")
category3 = Category.objects.create(name="Животные")
category4 = Category.objects.create(name="Игры")
category5 = Category.objects.create(name="Хрящевые рыбы")
category6 = Category.objects.create(name="Хищники")
category7 = Category.objects.create(name="Технологии")
___________________________________________________________________
Статьи/новости:

article1 = Post.objects.create(author=author1, post_type = 'article', title = "Москвич", text = "Легендарный советский автомобиль имеет огромную историю. Даже сегодня ,проходя тесты на прочность, агрегаты жтого автомобиля не перестают удивлять. Поршень Москвича выдерживает нагрузки, такие же, как и нагрузки на поршень спортивных автомобилей, предназначенных для развития феноменальных скоростей.", rating=5)

article2 = Post.objects.create(author=author2, post_type = 'article', title = "Акулы", text ="Акулы относятся к разряду хрящевых рыб, хищники. Самые свирепые существа морского царства. Их мощные челюсти способны прокусить пополам несколько слоев металлических листов.", rating=3)

news1 = Post.objects.create(author=author1, post_type = 'news', title = "Kenshi Project Genesis", rating=7)

news2 = Post.objects.create(author=author2, post_type = 'news', title = "Холодный термоядерный синтез", text="В основе экспериментов А.А. Корниловой лежит
 идея, высказанная французским ученым Луи Кервраном в 60-е годы прошлого века. Она заключается в том, что биологические системы способны синтезировать из имею
щихся компонентов критически важные для своего выживания микроэлементы или их биохимические аналоги. К таким микроэлементам относятся калий, кальций, натрий,
магний, фосфор, железо и др.Объектами первых опытов, проведенных А.А. Корниловой, были культуры бактерий Bacillus subtilis, Escherichia coli, Deinococcus radi
odurans. Их помещали в питательную среду, обедненную железом, но содержащую соль марганца и тяжелую воду (D2O). Эксперименты показали, что в этой системе выра
батывался редкий мёссбауэровский изотоп железа-57. По мнению авторов исследования, железо-57 появлялось в растущих клетках бактерий в результате реакции 55Mn
+ d = 57Fe (d — ядро атома дейтерия, состоящее из протона и нейтрона). Определенным аргументом в пользу предлагаемой гипотезы служит тот факт, что когда в пит
ательной среде тяжелую воду заменяли на легкую (H2O) или исключали соль марганца из ее состава, изотоп железа-57 не вырабатывался. Было проведено более 500 оп
ытов, в которых появление изотопа железа-57 было надежно установлено.", rating=5)


___________________________________________________________________
Создание объектов постов(статьи/новости):

>>> post1 = Post.objects.get(pk=1)
>>> post2 = Post.objects.get(pk=2)
>>> post3 = Post.objects.get(pk=3)
>>> post4 = Post.objects.get(pk=4)
___________________________________________________________________
Присвоение категорий постам:

article1.category.add(category1)
article2.category.add(category3, category5, category6)
news1.category.add(category4)
news2.category.add(category7)

___________________________________________________________________
Создание комментариев:

com1 = Comment.objects.create(text="Очень интересная статья!", rating=9, post=post1, user=randomuser)
com2 = Comment.objects.create(text="Качественный контент))", rating=11.5, post=post2, user=randomuser1)
com3 = Comment.objects.create(text="Наконец то она вышла.", rating=15.7, post=post3, user=randomuser2)

___________________________________________________________________
Корректировка рейтинга:

>>> com1.like()
>>> com1.like()
>>> com1.like()
com1 -> rating (9 -> 12)

>>> com2.dislike()
>>> com2.dislike()
>>> com2.dislike()
com2 -> rating (11,5 -> 8,5)

>>> com3.dislike()
>>> com3.dislike()
>>> com3.dislike()
com3 -> rating (15,7 -> 12,7)

>>> post1.like()
>>> post1.like()
>>> post1.like()
post1 -> rating (5 -> 8)

>>> post2.like()
>>> post2.like()
post2 -> rating (3 -> 5)

>>> post3.dislike()
post3 -> rating (7 -> 6)

___________________________________________________________________
Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

>>> best_author = Author.objects.all().order_by('-rating').first()
>>> f'Лучший пользователь: {best_author.user.username}, Рейтинг: {best_author.rating}'
'Лучший пользователь: Виктор, Рейтинг: 2.0'

___________________________________________________________________
Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

>>> best_post = Post.objects.all().order_by('-rating').first()
>>> preview = best_post.preview()
>>> f'Дата добавления: {best_post.created_at}, Автор: {best_post.author.user.username}, Рейтинг: {best_post.rating}, Заголовок: {best_post.title}, 
Превью: {preview}'
'Дата добавления: 2023-09-30 15:32:26.850725+00:00, Автор: Роман, Рейтинг: 8.0, Заголовок: Москвич, Превью: Легендарный советский автомобиль имеет огромную ис
торию. Даже сегодня ,проходя тесты на прочность, агрегаты жтого автомобиля...'

___________________________________________________________________
Тест. Увеличим рейтинг статьи с игрой с 6 до 9:

>>> post3 = Post.objects.get(pk=3)
>>> post3.title
'Kenshi Project Genesis'
>>> post3.like()
>>> post3.like()
>>> post3.like()
>>> best_post = Post.objects.all().order_by('-rating').first()
>>> preview = best_post.preview()
>>> f'Дата добавления: {best_post.created_at}, Автор: {best_post.author.user.username}, Рейтинг: {best_post.rating}, Заголовок: {best_post.title}, Превью: {pr
eview}'
'Дата добавления: 2023-09-30 15:50:55.033175+00:00, Автор: Роман, Рейтинг: 9.0, Заголовок: Kenshi Project Genesis, Превью: Нет содержания'

___________________________________________________________________
Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

Самый высокий рейтинг стал у поста Kenshi Project Genesis = 9 (pk=3).
У него есть 1 комментарий с рейтингом 12,7.

>>> comments_to_best_post = Comment.objects.filter(post=best_post)
>>> comments_to_best_post
<QuerySet [<Comment: Comment object (3)>]>
>>> comments_to_best_post.values('created_at', 'user', 'rating', 'text')
<QuerySet [{'created_at': datetime.datetime(2023, 9, 30, 16, 5, 27, 222636, tzinfo=datetime.timezone.utc), 'user': 7, 'rating': 12.7, 'text': 'Наконец то она
вышла.'}]>

___________________________________________________________________
Обновить рейтинги пользователей:

>>> author1 = Author.objects.get(pk=1)
>>> author1.update_rating()















